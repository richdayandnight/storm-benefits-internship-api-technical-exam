---------------------------------- page 1 ----------------------------------
#### DownExpandingContainer('title')
  Paragraph('CompanyAPI Documentation', style='title page title')
       > (0,0,1,0,2) title page title
         (0,0,0,0,2) body
    SingleStyledText('CompanyAPI Documentation')
  Paragraph('Release 0.0.1', style='title page subtitle')
       > (0,0,1,0,2) title page subtitle
         (0,0,0,0,2) body
    SingleStyledText('Release 0.0.1')
  Paragraph('Rich Yap', style='title page author')
       > (0,0,1,0,2) title page author
         (0,0,0,0,2) body
    SingleStyledText('Rich Yap')
  Paragraph('June 14, 2018', style='title page date')
       > (0,0,1,0,2) title page date
         (0,0,0,0,2) body
    SingleStyledText('June 14, 2018')
---------------------------------- page i ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('Table of Contents', style='front matter section title')
       > (0,0,1,0,2) front matter section title
         (0,0,0,0,2) body
    Field('Table of Contents')
      SingleStyledText('Table of Contents')
#### ChainedContainer('column1')
  TableOfContentsSection(style='table of contents')
       > (0,0,1,0,1) table of contents section
         (0,0,0,1,1) chapter
    TableOfContents()   table of contents
         > (0,0,0,0,2) table of contents
      TableOfContentsEntry('1	CompanyAPI App main	1')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('1	CompanyAPI App main	1')
            ReferenceField('1')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
            Tab('	')
            ReferenceField('CompanyAPI App main')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('CompanyAPI App main')
            Tab('	')
            ReferenceField('1')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
      TableOfContentsEntry('2	CompanyAPI models	7')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('2	CompanyAPI models	7')
            ReferenceField('2')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('2')
            Tab('	')
            ReferenceField('CompanyAPI models')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('CompanyAPI models')
            Tab('	')
            ReferenceField('7')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('7')
      TableOfContentsEntry('3	CompanyAPI database	7')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('3	CompanyAPI database	7')
            ReferenceField('3')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3')
            Tab('	')
            ReferenceField('CompanyAPI database')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('CompanyAPI database')
            Tab('	')
            ReferenceField('7')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('7')
      TableOfContentsEntry('4	Unit testing using unittest	11')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('4	Unit testing using unittest	11')
            ReferenceField('4')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('4')
            Tab('	')
            ReferenceField('Unit testing using unittest')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Unit testing using unittest')
            Tab('	')
            ReferenceField('11')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('11')
      TableOfContentsEntry('5	Indices and tables	15')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('5	Indices and tables	15')
            ReferenceField('5')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('5')
            Tab('	')
            ReferenceField('Indices and tables')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Indices and tables')
            Tab('	')
            ReferenceField('15')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('15')
      TableOfContentsEntry('	Python Module Index	17')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('	Python Module Index	17')
            ReferenceField('')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('')
            Tab('	')
            ReferenceField('Python Module Index')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Python Module Index')
            Tab('	')
            ReferenceField('17')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('17')
      TableOfContentsEntry('	Index	19')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('	Index	19')
            ReferenceField('')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('')
            Tab('	')
            ReferenceField('Index')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Index')
            Tab('	')
            ReferenceField('19')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('19')
#### DownExpandingContainer('footer')
  Footer('		i')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		i')
      Tab('	')
      Tab('	')
      Field('i')
        SingleStyledText('i')
---------------------------------- page 1 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 1', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 1')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('1', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('1')
      Paragraph('CompanyAPI App main', style='body matter chapter title')
           > (0,0,1,0,2) body matter chapter title
             (0,0,0,0,2) body
        Field('CompanyAPI App main')
          SingleStyledText('CompanyAPI App main')
#### ChainedContainer('column1')
  DocumentTree()
    StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:0 <compound>
    Section(id='module-app')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:13 <section>
         > (0,0,0,1,2) chapter
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.create_company (  ) ', id='app.create_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.create_company (  ) ')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('create_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('create_company')
              MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <desc_parameterlist>
                MixedStyledText(' ( ')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Create company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Create company')
              MixedStyledText('Create company', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Create company')
          Paragraph('This function allows user to cre...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function allows user to cre...')
              SingleStyledText('This function allows user to cre...')
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company information of the compa...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company information of the compa...')
                    SingleStyledText('company information of the compa...')
          List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:7 <bullet_list>
               > (0,0,1,0,2) bulleted list
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Example:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:7 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Example:')
                    SingleStyledText('Example:')
                CodeBlock('curl -X POST http://127.0.0.1:50...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:23 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('curl', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('X', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('POST', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('http', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('//', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('127.0', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token('.', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('0.1', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('5000', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('/', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''cache-control: no-cache'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''content-type: application/json'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''postman-token: c0db7776-aa16-77...', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('             ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('d', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''{', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Company_tempname"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('100', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"info@company.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Franchising"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:17 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Success Response:')
                    SingleStyledText('Expected Success Response:')
                CodeBlock('HTTP Status Code: 201\n\n{\n  "emai...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:33 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('201', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n  ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"info@company.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n  ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('100', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n  ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Franchising"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n  ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n  ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Company_tempname"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:29 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Fail Response:')
                    SingleStyledText('Expected Fail Response:')
                CodeBlock('HTTP Status Code: 400\n{'error': ...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.create_company:45 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('400', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''error'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''Duplicate company name'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.delete_company ( company_id ...', id='app.delete_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.delete_company ( company_id ...')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('delete_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('delete_company')
              MixedStyledText(' ( company_id ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <desc_parameterlist>
                MixedStyledText(' ( company_id')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('company_id', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                    MixedStyledText('company_id', style='parameter')   None:None <desc_parameter>
                         > (0,0,3,0,6) object parameter
                      SingleStyledText('company_id')
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Delete company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Delete company')
              MixedStyledText('Delete company', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Delete company')
          Paragraph('This function allows user to del...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function allows user to del...')
              SingleStyledText('This function allows user to del...')
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Parameters', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:0 <field_name>
                  SingleStyledText('Parameters')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company_id (int) – id of the com...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company_id (int) – id of the com...')
                    MixedStyledText('company_id', style='literal strong')   None:None <literal_strong>
                         > (0,0,1,0,1) literal strong
                      SingleStyledText('company_id')
                    SingleStyledText(' (')
                    AnnotatedText('int', style='external link')   None:None <reference>
                         > (0,0,1,0,1) external hyperlink
                      MixedStyledText('int')
                        MixedStyledText('int', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('int')
                    SingleStyledText(')')
                    SingleStyledText(' – ')
                    SingleStyledText('id of the company')
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('delete status in json and http s...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('delete status in json and http s...')
                    SingleStyledText('delete status in json and http s...')
#### DownExpandingContainer('footer')
  Footer('		1')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		1')
      Tab('	')
      Tab('	')
      Field('1')
        SingleStyledText('1')
---------------------------------- page 2 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-app')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:13 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <desc_content>
             > (0,0,2,0,3) object description content
          List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:9 <bullet_list>
               > (0,0,1,0,2) bulleted list
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Example:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:9 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Example:')
                    SingleStyledText('Example:')
                CodeBlock('curl -X DELETE http://127.0.0.1:...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:63 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('curl', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('X', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('DELETE', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('http', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('//', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('127.0', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token('.', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('0.1', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('5000', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('/', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('3', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''cache-control: no-cache'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''content-type: application/json'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:13 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Success Response:')
                    SingleStyledText('Expected Success Response:')
                CodeBlock('HTTP Status Code: 200\n\n{\n    "De...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:67 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('200', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Delete"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('true', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:21 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Fail Response:')
                    SingleStyledText('Expected Fail Response:')
                CodeBlock('HTTP Status Code: 404\n\n{'error':...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.delete_company:75 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('404', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''error'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''Not found'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.get_company ( company_id ) ', id='app.get_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.get_company ( company_id ) ')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('get_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('get_company')
              MixedStyledText(' ( company_id ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <desc_parameterlist>
                MixedStyledText(' ( company_id')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('company_id', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                    MixedStyledText('company_id', style='parameter')   None:None <desc_parameter>
                         > (0,0,3,0,6) object parameter
                      SingleStyledText('company_id')
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Get information of a specific co...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Get information of a specific co...')
              MixedStyledText('Get information of a specific co...', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Get information of a specific co...')
          Paragraph('This function allows user to get...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function allows user to get...')
              SingleStyledText('This function allows user to get...')
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Parameters', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:0 <field_name>
                  SingleStyledText('Parameters')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company_id (int) – id of the com...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company_id (int) – id of the com...')
                    MixedStyledText('company_id', style='literal strong')   None:None <literal_strong>
                         > (0,0,1,0,1) literal strong
                      SingleStyledText('company_id')
                    SingleStyledText(' (')
                    AnnotatedText('int', style='external link')   None:None <reference>
                         > (0,0,1,0,1) external hyperlink
                      MixedStyledText('int')
                        MixedStyledText('int', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('int')
                    SingleStyledText(')')
                    SingleStyledText(' – ')
                    SingleStyledText('id of the company')
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company information of the compa...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company information of the compa...')
                    SingleStyledText('company information of the compa...')
          List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:9 <bullet_list>
               > (0,0,1,0,2) bulleted list
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Example:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:9 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Example:')
                    SingleStyledText('Example:')
                CodeBlock('curl -X GET http://127.0.0.1:500...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:94 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('curl', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('X', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('GET', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('http', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('//', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('127.0', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token('.', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('0.1', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('5000', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('/', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('1', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''cache-control: no-cache'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''content-type: application/json'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:13 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Success Response:')
                    SingleStyledText('Expected Success Response:')
                CodeBlock('HTTP Status Code: 200\n\n{\n"Compan...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:98 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('200', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Company"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"feedback@jollibee.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('9999', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"id"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('1', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Food"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Jollibee Foods Corporation"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:28 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Fail Response:')
                    SingleStyledText('Expected Fail Response:')
                CodeBlock('HTTP Status Code: 404\n\n{'error':...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.get_company:113 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('404', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''error'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''Not found'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.index (  ) ', id='app.index')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.index (  ) ')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('index', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('index')
              MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <desc_parameterlist>
                MixedStyledText(' ( ')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Get List of Companies')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Get List of Companies')
              MixedStyledText('Get List of Companies', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Get List of Companies')
          Paragraph('This function allows user to get...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function allows user to get...')
              SingleStyledText('This function allows user to get...')
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('2		Chapter 1.  CompanyAPI App ma...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('2		Chapter 1.  CompanyAPI App ma...')
      Field('2')
        SingleStyledText('2')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('1')
        SingleStyledText('1')
      SingleStyledText('.  ')
      Field('CompanyAPI App main')
        SingleStyledText('CompanyAPI App main')
---------------------------------- page 3 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-app')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:13 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <desc_content>
             > (0,0,2,0,3) object description content
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company information of all compa...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company information of all compa...')
                    SingleStyledText('company information of all compa...')
          List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:7 <bullet_list>
               > (0,0,1,0,2) bulleted list
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Example:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:7 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Example:')
                    SingleStyledText('Example:')
                CodeBlock('curl -X GET http://127.0.0.1:500...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:130 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('curl', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('X', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('GET', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('http', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('//', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('127.0', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token('.', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('0.1', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('5000', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('/', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''cache-control: no-cache'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''content-type: application/json'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:11 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Success Response:')
                    SingleStyledText('Expected Success Response:')
                CodeBlock('HTTP Status Code: 200\n\n{\n"Compan...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.index:134 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('200', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Companies"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('[', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"feedback@jollibee.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('9999', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"id"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('1', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Food"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Jollibee Foods Corporation"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('},', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"storm@storm.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('100', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"id"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('3', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Technology"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Storm"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('},', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"info@company.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('100', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"id"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('6', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Franchising"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Company_tempname"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(']', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.not_found (  ) ', id='app.not_found')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.not_found (  ) ')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('not_found', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('not_found')
              MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:None <desc_parameterlist>
                MixedStyledText(' ( ')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Error handler')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Error handler')
              MixedStyledText('Error handler', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Error handler')
          Paragraph('This function returns a not foun...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function returns a not foun...')
              SingleStyledText('This function returns a not foun...')
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.not_found:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('not found error in json')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('not found error in json')
                    SingleStyledText('not found error in json')
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.search (  ) ', id='app.search')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.search (  ) ')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('search', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('search')
              MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <desc_parameterlist>
                MixedStyledText(' ( ')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Search company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Search company')
              MixedStyledText('Search company', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Search company')
          Paragraph('This function allows user to sea...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function allows user to sea...')
              SingleStyledText('This function allows user to sea...')
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('searched companies in json and h...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('searched companies in json and h...')
                    SingleStyledText('searched companies in json and h...')
          List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:7 <bullet_list>
               > (0,0,1,0,2) bulleted list
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Example:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:7 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Example:')
                    SingleStyledText('Example:')
                CodeBlock('curl -X POST http://127.0.0.1:50...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:189 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('curl', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('X', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('POST', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('http', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('//', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('127.0', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token('.', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('0.1', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('5000', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('/', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('search', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''cache-control: no-cache'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''content-type: application/json'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''postman-token: f2c027be-acda-3a...', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('d', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''{', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"value"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Jollibee"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
#### UpExpandingContainer('header')
  Header('		CompanyAPI Documentation, Rele...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('		CompanyAPI Documentation, Rele...')
      Tab('	')
      Tab('	')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('​.  ​		3')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('​.  ​		3')
      Field('​')
        SingleStyledText('​')
      SingleStyledText('.  ')
      Field('​')
        SingleStyledText('​')
      Tab('	')
      Tab('	')
      Field('3')
        SingleStyledText('3')
---------------------------------- page 4 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-app')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:13 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <desc_content>
             > (0,0,2,0,3) object description content
          (continued) List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:7 <bullet_list>
               > (0,0,1,0,2) bulleted list
            (continued) ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              (continued) StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <list_item>
                   > (0,0,0,0,3) list item body
                (continued) CodeBlock('curl -X POST http://127.0.0.1:50...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:189 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:14 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Success Response:')
                    SingleStyledText('Expected Success Response:')
                CodeBlock('HTTP Status Code: 200\n\n{\n    "Co...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.search:196 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('200', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Companies"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('[', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"feedback@jollibee.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('9999', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"id"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('1', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Food"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Philippines"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n            ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Jollibee Foods Corporation"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n        ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(']', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('app.update_company ( company_id ...', id='app.update_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('app.update_company ( company_id ...')
              MixedStyledText('app.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('app.')
              MixedStyledText('update_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('update_company')
              MixedStyledText(' ( company_id ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <desc_parameterlist>
                MixedStyledText(' ( company_id')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('company_id', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                    MixedStyledText('company_id', style='parameter')   None:None <desc_parameter>
                         > (0,0,3,0,6) object parameter
                      SingleStyledText('company_id')
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <desc_content>
             > (0,0,2,0,3) object description content
          Paragraph('Update information of a specific...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:1 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('Update information of a specific...')
              MixedStyledText('Update information of a specific...', style='strong')   None:None <strong>
                   > (0,0,1,0,1) strong
                SingleStyledText('Update information of a specific...')
          Paragraph('This function allows user to get...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:3 <paragraph>
               > (0,0,2,0,5) object description content paragraph
                 (0,0,0,0,2) body
            MixedStyledText('This function allows user to get...')
              SingleStyledText('This function allows user to get...')
          DefinitionList(style='field list')   None:None <field_list>
               > (0,0,1,0,2) field list
                 (0,0,0,0,2) definition list
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Parameters', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:0 <field_name>
                  SingleStyledText('Parameters')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company_id (int) – id of the com...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company_id (int) – id of the com...')
                    MixedStyledText('company_id', style='literal strong')   None:None <literal_strong>
                         > (0,0,1,0,1) literal strong
                      SingleStyledText('company_id')
                    SingleStyledText(' (')
                    AnnotatedText('int', style='external link')   None:None <reference>
                         > (0,0,1,0,1) external hyperlink
                      MixedStyledText('int')
                        MixedStyledText('int', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('int')
                    SingleStyledText(')')
                    SingleStyledText(' – ')
                    SingleStyledText('id of the company')
            LabeledFlowable()   None:None <field>
                 > (0,0,1,0,4) field list item
                   (0,0,0,0,4) definition list item
              Paragraph('Returns', style='field name')
                   > (0,0,2,0,6) field name
                     (0,0,0,0,2) body
                MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:0 <field_name>
                  SingleStyledText('Returns')
              StaticGroupedFlowables()   None:None <field_body>
                Paragraph('company information of the compa...')   None:None <paragraph>
                     > (0,0,0,0,2) body
                  MixedStyledText('company information of the compa...')
                    SingleStyledText('company information of the compa...')
          List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:9 <bullet_list>
               > (0,0,1,0,2) bulleted list
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Example:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:9 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Example:')
                    SingleStyledText('Example:')
                CodeBlock('curl -X PUT http://127.0.0.1:500...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:226 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('curl', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('X', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('PUT', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('http', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('//', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('127.0', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token('.', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('0.1', type=Token.Literal.Number.Float)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('5000', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('/', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('2', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''cache-control: no-cache'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''content-type: application/json'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('H', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''postman-token: 423a3668-cdaf-55...', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('-', type=Token.Operator)
                       > (0,0,0,1,2) (pygments)Token.Operator
                         (0,0,0,1,2) (pygments)Token.Operator
                  Token('d', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''{', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"google_drive@gmail.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('9999', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Software"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"USA"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Google Drive"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:20 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Success Response:')
                    SingleStyledText('Expected Success Response:')
                CodeBlock('HTTP Status Code: 200\n\n{\n    "em...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:237 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('200', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"email"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"google_drive@gmail.com"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"employees_num"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('9999', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"industry"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Software"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"location"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"USA"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(',', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n    ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"name"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('"Google Drive"', type=Token.Literal.String.Double)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                         (0,0,0,1,2) (pygments)Token.Literal.String.Double
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
            ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              ListItemLabel('•')
                   > (0,0,1,0,6) bulleted list item label
                     (0,0,0,0,2) list item label
                  MixedStyledText('•')
                    SingleStyledText('')
                    SingleStyledText('•')
                    SingleStyledText('')
              StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <list_item>
                   > (0,0,0,0,3) list item body
                Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:32 <paragraph>
                     > (0,0,0,0,5) list item paragraph
                       (0,0,0,0,2) body
                  MixedStyledText('Expected Fail Response:')
                    SingleStyledText('Expected Fail Response:')
                CodeBlock('HTTP Status Code: 404\n\n{'error':...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:249 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
                  Token('HTTP', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Status', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('Code', type=Token.Name)
                       > (0,0,0,1,2) (pygments)Token.Name
                         (0,0,0,1,2) (pygments)Token.Name
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('404', type=Token.Literal.Number.Integer)
                       > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                         (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('{', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(''error'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token(':', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token(' ', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token(''Not found'', type=Token.Literal.String.Single)
                       > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                         (0,0,0,1,2) (pygments)Token.Literal.String.Single
                  Token('}', type=Token.Punctuation)
                       > (0,0,0,1,2) (pygments)Token.Punctuation
                         (0,0,0,1,2) (pygments)Token.Punctuation
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
                  Token('or', type=Token.Operator.Word)
                       > (0,0,0,1,2) (pygments)Token.Operator.Word
                         (0,0,0,1,2) (pygments)Token.Operator.Word
                  Token('\n\n', type=Token.Text)
                       > (0,0,0,1,2) (pygments)Token.Text
                         (0,0,0,1,2) (pygments)Token.Text
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('4		Chapter 1.  CompanyAPI App ma...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('4		Chapter 1.  CompanyAPI App ma...')
      Field('4')
        SingleStyledText('4')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('1')
        SingleStyledText('1')
      SingleStyledText('.  ')
      Field('CompanyAPI App main')
        SingleStyledText('CompanyAPI App main')
---------------------------------- page 5 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-app')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:13 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <desc_content>
             > (0,0,2,0,3) object description content
          (continued) List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:9 <bullet_list>
               > (0,0,1,0,2) bulleted list
            (continued) ListItem()
                 x (0,0,1,0,4) bulleted list item
                 > fallback to default style
              (continued) StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:None <list_item>
                   > (0,0,0,0,3) list item body
                (continued) CodeBlock('HTTP Status Code: 404\n\n{'error':...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/app.py:docstring of app.update_company:249 <literal_block>
                     > (1,0,0,0,2) code block
                       (0,0,0,0,4) list item paragraph
                       (0,0,0,0,1) body
#### UpExpandingContainer('header')
  Header('		CompanyAPI Documentation, Rele...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('		CompanyAPI Documentation, Rele...')
      Tab('	')
      Tab('	')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('​.  ​		5')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('​.  ​		5')
      Field('​')
        SingleStyledText('​')
      SingleStyledText('.  ')
      Field('​')
        SingleStyledText('​')
      Tab('	')
      Tab('	')
      Field('5')
        SingleStyledText('5')
---------------------------------- page 6 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('6		Chapter 1.  CompanyAPI App ma...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('6		Chapter 1.  CompanyAPI App ma...')
      Field('6')
        SingleStyledText('6')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('1')
        SingleStyledText('1')
      SingleStyledText('.  ')
      Field('CompanyAPI App main')
        SingleStyledText('CompanyAPI App main')
---------------------------------- page 7 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 2', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 2')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('2', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('2')
      Paragraph('CompanyAPI models', style='body matter chapter title')
           > (0,0,1,0,2) body matter chapter title
             (0,0,0,0,2) body
        Field('CompanyAPI models')
          SingleStyledText('CompanyAPI models')
  Paragraph('CHAPTER 2', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 2')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('2', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('2')
#### ChainedContainer('column1')
  (continued) DocumentTree()
    Section(id='module-companyAPI.models')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:18 <section>
         > (0,0,0,1,2) chapter
#### DownExpandingContainer('footer')
  Footer('		7')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		7')
      Tab('	')
      Tab('	')
      Field('7')
        SingleStyledText('7')
---------------------------------- page 8 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('8		Chapter 3.  CompanyAPI databa...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('8		Chapter 3.  CompanyAPI databa...')
      Field('8')
        SingleStyledText('8')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('3')
        SingleStyledText('3')
      SingleStyledText('.  ')
      Field('CompanyAPI database')
        SingleStyledText('CompanyAPI database')
---------------------------------- page 9 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    Section(id='module-companyAPI.database')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:23 <section>
         > (0,0,0,1,2) chapter
      Paragraph('CompanyAPI database', style='body matter chapter title')
           > (0,0,1,0,2) body matter chapter title
             (0,0,0,0,2) body
#### DownExpandingContainer('footer')
  Footer('		9')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		9')
      Tab('	')
      Tab('	')
      Field('9')
        SingleStyledText('9')
---------------------------------- page 10 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('10		Chapter 3.  CompanyAPI datab...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('10		Chapter 3.  CompanyAPI datab...')
      Field('10')
        SingleStyledText('10')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('3')
        SingleStyledText('3')
      SingleStyledText('.  ')
      Field('CompanyAPI database')
        SingleStyledText('CompanyAPI database')
---------------------------------- page 11 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 4', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 4')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('4', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('4')
      Paragraph('Unit testing using unittest', style='body matter chapter title')
           > (0,0,1,0,2) body matter chapter title
             (0,0,0,0,2) body
        Field('Unit testing using unittest')
          SingleStyledText('Unit testing using unittest')
#### ChainedContainer('column1')
  (continued) DocumentTree()
    Section(id='module-unittest_companyAPI')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:28 <section>
         > (0,0,0,1,2) chapter
      LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        StaticGroupedFlowables(style='signatures')
             > (0,0,2,0,3) object signatures
          Paragraph('class unittest_companyAPI.Compan...', id='unittest_companyAPI.CompanyAppTest')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_signature>
               > (0,0,2,0,5) object signature
                 (0,0,0,0,2) body
            MixedStyledText('class unittest_companyAPI.Compan...')
              MixedStyledText('class ', style='annotation')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_annotation>
                   > (0,0,3,0,6) object annotation
                SingleStyledText('class ')
              MixedStyledText('unittest_companyAPI.', style='additional name part')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_addname>
                   > (0,0,3,0,6) additional name part
                SingleStyledText('unittest_companyAPI.')
              MixedStyledText('CompanyAppTest', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_name>
                   > (0,0,3,0,6) object name
                SingleStyledText('CompanyAppTest')
              MixedStyledText(' ( methodName='runTest' ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_parameterlist>
                MixedStyledText(' ( methodName='runTest'')
                  SingleStyledText(' ( ', style='parentheses')
                       > (0,0,3,0,6) object parentheses
                  MixedStyledText('methodName='runTest'', style='parameter list')
                       > (0,0,3,0,6) object parameter list
                    MixedStyledText('methodName='runTest'', style='parameter')   None:None <desc_parameter>
                         > (0,0,3,0,6) object parameter
                      SingleStyledText('methodName='runTest'')
                SingleStyledText(' ) ', style='parentheses')
                     > (0,0,3,0,6) object parentheses
        StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_content>
             > (0,0,2,0,3) object description content
          LabeledFlowable(style='object description')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.setUp:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('setUp (  ) ', id='unittest_companyAPI.CompanyAppTest.setUp')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.setUp:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('setUp (  ) ')
                  MixedStyledText('setUp', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.setUp:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('setUp')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.setUp:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.setUp:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Hook method for setting up the t...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.setUp:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Hook method for setting up the t...')
                  SingleStyledText('Hook method for setting up the t...')
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_delete_company (  ) ', id='unittest_companyAPI.CompanyAppTest.test_delete_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_delete_company (  ) ')
                  MixedStyledText('test_delete_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_delete_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Deleting a Company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Deleting a Company')
                  MixedStyledText('Test Deleting a Company', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Deleting a Company')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:29 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\ndelete = {"Delete": True...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_company:33 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('delete', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"Delete"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('True', type=Token.Keyword.Constant)
                           > (0,0,0,1,2) (pygments)Token.Keyword.Constant
                             (0,0,0,1,2) (pygments)Token.Keyword.Constant
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_delete_nonexisting_company ...', id='unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_delete_nonexisting_company ...')
                  MixedStyledText('test_delete_nonexisting_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_delete_nonexisting_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Deleting a non-existing Com...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Deleting a non-existing Com...')
                  SingleStyledText('Test Deleting a non-existing Com...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:53 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n{"error": "Not found"} !=...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_delete_nonexisting_company:57 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"error"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Not found"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
#### DownExpandingContainer('footer')
  Footer('		11')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		11')
      Tab('	')
      Tab('	')
      Field('11')
        SingleStyledText('11')
---------------------------------- page 12 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-unittest_companyAPI')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:28 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_content>
             > (0,0,2,0,3) object description content
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_get_company (  ) ', id='unittest_companyAPI.CompanyAppTest.test_get_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_get_company (  ) ')
                  MixedStyledText('test_get_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_get_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Getting Company Information...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Getting Company Information...')
                  MixedStyledText('Test Getting Company Information...', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Getting Company Information...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:76 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\n{'Company':\n    {'email'...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_company:80 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(''Company'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(''email'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''feedback@jollibee.com'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n     ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''employees_num'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('9999', type=Token.Literal.Number.Integer)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                             (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n     ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''id'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('1', type=Token.Literal.Number.Integer)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                             (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n     ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''industry'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''Food'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n     ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''location'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''Philippines'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n     ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''name'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token(''Jollibee Foods Corporation'', type=Token.Literal.String.Single)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                             (0,0,0,1,2) (pygments)Token.Literal.String.Single
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_get_empty_company (  ) ', id='unittest_companyAPI.CompanyAppTest.test_get_empty_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_get_empty_company (  ) ')
                  MixedStyledText('test_get_empty_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_get_empty_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Getting Company Information...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Getting Company Information...')
                  MixedStyledText('Test Getting Company Information...', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Getting Company Information...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:108 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\n{"error": "Not found"} !...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_get_empty_company:112 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"error"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Not found"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_post_company (  ) ', id='unittest_companyAPI.CompanyAppTest.test_post_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_post_company (  ) ')
                  MixedStyledText('test_post_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_post_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Adding (Post) a Company wit...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Adding (Post) a Company wit...')
                  MixedStyledText('Test Adding (Post) a Company wit...', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Adding (Post) a Company wit...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    StaticGroupedFlowables(style='block quote')   None:None <block_quote>
                         > (0,0,1,0,1) block quote
                      Paragraph('OK')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:12 <paragraph>
                           > (0,0,0,0,2) body
                        MixedStyledText('OK')
                          SingleStyledText('OK')
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('12		Chapter 4.  Unit testing usi...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('12		Chapter 4.  Unit testing usi...')
      Field('12')
        SingleStyledText('12')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('4')
        SingleStyledText('4')
      SingleStyledText('.  ')
      Field('Unit testing using unittest')
        SingleStyledText('Unit testing using unittest')
---------------------------------- page 13 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-unittest_companyAPI')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:28 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_content>
             > (0,0,2,0,3) object description content
          (continued) LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              (continued) List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n{\n    "name": "Company_te...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_company:135 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"name"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Company_tempname"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"employees_num"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('100', type=Token.Literal.Number.Integer)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                             (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"email"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"info@company.com"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"location"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Philippines"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"industry"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Franchising"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_post_duplicate_company_name...', id='unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_post_duplicate_company_name...')
                  MixedStyledText('test_post_duplicate_company_name', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_post_duplicate_company_name')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Adding (Post) a Company wit...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Adding (Post) a Company wit...')
                  SingleStyledText('Test Adding (Post) a Company wit...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:161 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\n{"error": "Duplicate com...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_post_duplicate_company_name:165 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"error"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Duplicate company name"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_put_company (  ) ', id='unittest_companyAPI.CompanyAppTest.test_put_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_put_company (  ) ')
                  MixedStyledText('test_put_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_put_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Editing a Company Informati...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Editing a Company Informati...')
                  SingleStyledText('Test Editing a Company Informati...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:9 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   None:None <list_item>
                       > (0,0,0,0,3) list item body
                    DefinitionList()   None:None <definition_list>
                         > (0,0,0,0,2) definition list
                      LabeledFlowable()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:10 <definition_list_item>
                           > (0,0,0,0,4) definition list item
                        StaticGroupedFlowables(style='definition term')
                             > (0,0,1,0,5) definition term
                          Paragraph('Expected Success Response::')
                               > (0,0,1,0,7) definition term paragraph
                                 (0,0,0,0,2) body
                            MixedStyledText('Expected Success Response::')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:10 <term>
                              SingleStyledText('Expected Success Response::')
                        StaticGroupedFlowables(style='definition')   None:None <definition>
                             > (0,0,1,0,5) definition
                          Paragraph('OK')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:10 <paragraph>
                               > (0,0,1,0,7) definition paragraph
                                 (0,0,0,0,2) body
                            MixedStyledText('OK')
                              SingleStyledText('OK')
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:12 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\n{\n    "email": "feedback...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_company:187 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"email"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"feedback@jollibee.com"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"employees_num"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('9999', type=Token.Literal.Number.Integer)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                             (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"industry"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Food"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"location"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Philippines"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(',', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('\n    ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"name"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Jollibee Foods Corporation"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_put_duplicate_company_name ...', id='unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_put_duplicate_company_name ...')
                  MixedStyledText('test_put_duplicate_company_name', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_put_duplicate_company_name')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Editing a Company Informati...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Editing a Company Informati...')
                  MixedStyledText('Test Editing a Company Informati...', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Editing a Company Informati...')
#### UpExpandingContainer('header')
  Header('		CompanyAPI Documentation, Rele...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('		CompanyAPI Documentation, Rele...')
      Tab('	')
      Tab('	')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('​.  ​		13')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('​.  ​		13')
      Field('​')
        SingleStyledText('​')
      SingleStyledText('.  ')
      Field('​')
        SingleStyledText('​')
      Tab('	')
      Tab('	')
      Field('13')
        SingleStyledText('13')
---------------------------------- page 14 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='module-unittest_companyAPI')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:28 <section>
         > (0,0,0,1,2) chapter
      (continued) LabeledFlowable(style='object description')   None:None <desc>
           > (0,0,1,0,2) object description
        (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest:None <desc_content>
             > (0,0,2,0,3) object description content
          (continued) LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            (continued) StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:213 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\n{"error": "Duplicate com...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_duplicate_company_name:217 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"error"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Duplicate company name"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_put_non_existing_company ( ...', id='unittest_companyAPI.CompanyAppTest.test_put_non_existing_company')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_put_non_existing_company ( ...')
                  MixedStyledText('test_put_non_existing_company', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_put_non_existing_company')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Editing a Company Informati...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Editing a Company Informati...')
                  MixedStyledText('Test Editing a Company Informati...', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Editing a Company Informati...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   None:None <list_item>
                       > (0,0,0,0,3) list item body
                    DefinitionList()   None:None <definition_list>
                         > (0,0,0,0,2) definition list
                      LabeledFlowable()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:11 <definition_list_item>
                           > (0,0,0,0,4) definition list item
                        StaticGroupedFlowables(style='definition term')
                             > (0,0,1,0,5) definition term
                          Paragraph('Expected Success Response::')
                               > (0,0,1,0,7) definition term paragraph
                                 (0,0,0,0,2) body
                            MixedStyledText('Expected Success Response::')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:11 <term>
                              SingleStyledText('Expected Success Response::')
                        StaticGroupedFlowables(style='definition')   None:None <definition>
                             > (0,0,1,0,5) definition
                          Paragraph('OK')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:11 <paragraph>
                               > (0,0,1,0,7) definition paragraph
                                 (0,0,0,0,2) body
                            MixedStyledText('OK')
                              SingleStyledText('OK')
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:13 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n{"error": "Not found"} !=...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_non_existing_company:240 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"error"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Not found"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
          LabeledFlowable(style='object description')   None:None <desc>
               > (0,0,1,0,2) object description
            StaticGroupedFlowables(style='signatures')
                 > (0,0,2,0,3) object signatures
              Paragraph('test_put_null_company_name (  ) ', id='unittest_companyAPI.CompanyAppTest.test_put_null_company_name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:None <desc_signature>
                   > (0,0,2,0,5) object signature
                     (0,0,0,0,2) body
                MixedStyledText('test_put_null_company_name (  ) ')
                  MixedStyledText('test_put_null_company_name', style='main object name')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:None <desc_name>
                       > (0,0,3,0,6) object name
                    SingleStyledText('test_put_null_company_name')
                  MixedStyledText(' (  ) ')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:None <desc_parameterlist>
                    MixedStyledText(' ( ')
                      SingleStyledText(' ( ', style='parentheses')
                           > (0,0,3,0,6) object parentheses
                      MixedStyledText('', style='parameter list')
                           > (0,0,3,0,6) object parameter list
                    SingleStyledText(' ) ', style='parentheses')
                         > (0,0,3,0,6) object parentheses
            StaticGroupedFlowables(style='content')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:None <desc_content>
                 > (0,0,2,0,3) object description content
              Paragraph('Test Editing a Company Informati...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:1 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('Test Editing a Company Informati...')
                  MixedStyledText('Test Editing a Company Informati...', style='strong')   None:None <strong>
                       > (0,0,1,0,1) strong
                    SingleStyledText('Test Editing a Company Informati...')
              Paragraph('This function tests the companyA...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:3 <paragraph>
                   > (0,0,2,0,5) object description content paragraph
                     (0,0,0,0,2) body
                MixedStyledText('This function tests the companyA...')
                  SingleStyledText('This function tests the companyA...')
              DefinitionList(style='field list')   None:None <field_list>
                   > (0,0,1,0,2) field list
                     (0,0,0,0,2) definition list
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Parameters', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Parameters')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:0 <field_name>
                      SingleStyledText('Parameters')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('self (CompanyAppTest.) – an inst...')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('self (CompanyAppTest.) – an inst...')
                        MixedStyledText('self', style='literal strong')   None:None <literal_strong>
                             > (0,0,1,0,1) literal strong
                          SingleStyledText('self')
                        SingleStyledText(' (')
                        MixedStyledText('CompanyAppTest.', style='literal emphasis')   None:None <literal_emphasis>
                             > (0,0,1,0,1) literal emphasis
                          SingleStyledText('CompanyAppTest.')
                        SingleStyledText(')')
                        SingleStyledText(' – ')
                        SingleStyledText('an instance of the companyAPI ap...')
                LabeledFlowable()   None:None <field>
                     > (0,0,1,0,4) field list item
                       (0,0,0,0,4) definition list item
                  Paragraph('Returns', style='field name')
                       > (0,0,2,0,6) field name
                         (0,0,0,0,2) body
                    MixedStyledText('Returns')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:0 <field_name>
                      SingleStyledText('Returns')
                  StaticGroupedFlowables()   None:None <field_body>
                    Paragraph('none.')   None:None <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('none.')
                        SingleStyledText('none.')
              List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:10 <bullet_list>
                   > (0,0,1,0,2) bulleted list
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Success Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:10 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Success Response:')
                        SingleStyledText('Expected Success Response:')
                    CodeBlock('OK\n')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:259 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('OK', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                ListItem()
                     x (0,0,1,0,4) bulleted list item
                     > fallback to default style
                  ListItemLabel('•')
                       > (0,0,1,0,6) bulleted list item label
                         (0,0,0,0,2) list item label
                      MixedStyledText('•')
                        SingleStyledText('')
                        SingleStyledText('•')
                        SingleStyledText('')
                  StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:None <list_item>
                       > (0,0,0,0,3) list item body
                    Paragraph('Expected Fail Response:')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:14 <paragraph>
                         > (0,0,0,0,5) list item paragraph
                           (0,0,0,0,2) body
                      MixedStyledText('Expected Fail Response:')
                        SingleStyledText('Expected Fail Response:')
                    CodeBlock('FAILED\n\n{"error": "Company name ...')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/companyAPI/unittest_companyAPI.py:docstring of unittest_companyAPI.CompanyAppTest.test_put_null_company_name:263 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,4) list item paragraph
                           (0,0,0,0,1) body
                      Token('FAILED', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('\n\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('{', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token('"error"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token(':', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('"Company name not a string"', type=Token.Literal.String.Double)
                           > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                             (0,0,0,1,2) (pygments)Token.Literal.String.Double
                      Token('}', type=Token.Punctuation)
                           > (0,0,0,1,2) (pygments)Token.Punctuation
                             (0,0,0,1,2) (pygments)Token.Punctuation
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('!=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('<', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('json', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('returned', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('by', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('the', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token(' ', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('test_client', type=Token.Name)
                           > (0,0,0,1,2) (pygments)Token.Name
                             (0,0,0,1,2) (pygments)Token.Name
                      Token('>', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('14		Chapter 4.  Unit testing usi...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('14		Chapter 4.  Unit testing usi...')
      Field('14')
        SingleStyledText('14')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('4')
        SingleStyledText('4')
      SingleStyledText('.  ')
      Field('Unit testing using unittest')
        SingleStyledText('Unit testing using unittest')
---------------------------------- page 15 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 5', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 5')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('5', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('5')
      Paragraph('Indices and tables', style='body matter chapter title')
           > (0,0,1,0,2) body matter chapter title
             (0,0,0,0,2) body
        Field('Indices and tables')
          SingleStyledText('Indices and tables')
#### ChainedContainer('column1')
  (continued) DocumentTree()
    Section(id='indices-and-tables')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:34 <section>
         > (0,0,0,1,2) chapter
      List(style='bulleted')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:36 <bullet_list>
           > (0,0,1,0,2) bulleted list
        ListItem()
             x (0,0,1,0,4) bulleted list item
             > fallback to default style
          ListItemLabel('•')
               > (0,0,1,0,6) bulleted list item label
                 (0,0,0,0,2) list item label
              MixedStyledText('•')
                SingleStyledText('')
                SingleStyledText('•')
                SingleStyledText('')
          StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:None <list_item>
               > (0,0,0,0,3) list item body
            Paragraph('Index')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:36 <paragraph>
                 > (0,0,0,0,5) list item paragraph
                   (0,0,0,0,2) body
              MixedStyledText('Index')
                AnnotatedText('Index', style='internal link')   None:None <reference>
                     > (0,0,1,0,1) internal hyperlink
                  MixedStyledText('Index')
                    MixedStyledText('Index')   None:None <inline>
                      SingleStyledText('Index')
        ListItem()
             x (0,0,1,0,4) bulleted list item
             > fallback to default style
          ListItemLabel('•')
               > (0,0,1,0,6) bulleted list item label
                 (0,0,0,0,2) list item label
              MixedStyledText('•')
                SingleStyledText('')
                SingleStyledText('•')
                SingleStyledText('')
          StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:None <list_item>
               > (0,0,0,0,3) list item body
            Paragraph('Module Index')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:37 <paragraph>
                 > (0,0,0,0,5) list item paragraph
                   (0,0,0,0,2) body
              MixedStyledText('Module Index')
                AnnotatedText('Module Index', style='internal link')   None:None <reference>
                     > (0,0,1,0,1) internal hyperlink
                  MixedStyledText('Module Index')
                    MixedStyledText('Module Index')   None:None <inline>
                      SingleStyledText('Module Index')
        ListItem()
             x (0,0,1,0,4) bulleted list item
             > fallback to default style
          ListItemLabel('•')
               > (0,0,1,0,6) bulleted list item label
                 (0,0,0,0,2) list item label
              MixedStyledText('•')
                SingleStyledText('')
                SingleStyledText('•')
                SingleStyledText('')
          StaticGroupedFlowables()   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:None <list_item>
               > (0,0,0,0,3) list item body
            Paragraph('Search Page')   /home/rich/Documents/Github/storm-benefits-internship-api-technical-exam/source/index.rst:38 <paragraph>
                 > (0,0,0,0,5) list item paragraph
                   (0,0,0,0,2) body
              MixedStyledText('Search Page')
                AnnotatedText('Search Page', style='internal link')   None:None <reference>
                     > (0,0,1,0,1) internal hyperlink
                  MixedStyledText('Search Page')
                    MixedStyledText('Search Page')   None:None <inline>
                      SingleStyledText('Search Page')
#### DownExpandingContainer('footer')
  Footer('		15')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		15')
      Tab('	')
      Tab('	')
      Field('15')
        SingleStyledText('15')
---------------------------------- page 17 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('Python Module Index', style='front matter section title')
       > (0,0,1,0,2) front matter section title
         (0,0,0,0,2) body
    Field('Python Module Index')
      SingleStyledText('Python Module Index')
#### ChainedContainer('column1')
  StaticGroupedFlowables()
    IndexSection()
         > (0,0,0,1,1) chapter
      IndexLabel('a')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('a')
      IndexEntry('app, 1')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('app, 1')
          SingleStyledText('app', style='domain')
               > (0,0,1,0,3) domain index entry name
          SingleStyledText(', ')
          Reference('1')
               > (0,0,0,1,1) linked reference
            SingleStyledText('1')
      IndexLabel('c')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('c')
      IndexEntry('companyAPI')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        SingleStyledText('companyAPI', style='domain')
             > (0,0,1,0,3) domain index entry name
      IndexEntry('companyAPI.database, 7')
           > (0,0,0,1,2) level 2 index entry
             (0,0,0,0,1) body
        MixedStyledText('companyAPI.database, 7')
          SingleStyledText('companyAPI.database', style='domain')
               > (0,0,1,0,3) domain index entry name
          SingleStyledText(', ')
          Reference('7')
               > (0,0,0,1,1) linked reference
            SingleStyledText('7')
      IndexEntry('companyAPI.models, 7')
           > (0,0,0,1,2) level 2 index entry
             (0,0,0,0,1) body
        MixedStyledText('companyAPI.models, 7')
          SingleStyledText('companyAPI.models', style='domain')
               > (0,0,1,0,3) domain index entry name
          SingleStyledText(', ')
          Reference('7')
               > (0,0,0,1,1) linked reference
            SingleStyledText('7')
      IndexLabel('u')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('u')
      IndexEntry('unittest_companyAPI, 11')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('unittest_companyAPI, 11')
          SingleStyledText('unittest_companyAPI', style='domain')
               > (0,0,1,0,3) domain index entry name
          SingleStyledText(', ')
          Reference('11')
               > (0,0,0,1,1) linked reference
            SingleStyledText('11')
#### DownExpandingContainer('footer')
  Footer('		17')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		17')
      Tab('	')
      Tab('	')
      Field('17')
        SingleStyledText('17')
---------------------------------- page 18 ----------------------------------
#### UpExpandingContainer('header')
  Header('CompanyAPI Documentation, Releas...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('CompanyAPI Documentation, Releas...')
      Field('CompanyAPI Documentation')
        SingleStyledText('CompanyAPI Documentation')
      SingleStyledText(', ')
      Field('Release 0.0.1')
        SingleStyledText('Release 0.0.1')
#### DownExpandingContainer('footer')
  Footer('18		Python Module Index')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('18		Python Module Index')
      Field('18')
        SingleStyledText('18')
      Tab('	')
      Tab('	')
      Field('Python Module Index')
        SingleStyledText('Python Module Index')
---------------------------------- page 19 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('Index', style='front matter section title')
       > (0,0,1,0,2) front matter section title
         (0,0,0,0,2) body
    Field('Index')
      SingleStyledText('Index')
#### ChainedContainer('column1')
  IndexSection()
       > (0,0,0,1,1) chapter
    Index()   index
         > (0,0,0,0,2) index
      IndexLabel('A')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('A')
      IndexEntry('app (module), 1, 1')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('app (module), 1, 1')
          SingleStyledText('app (module), ')
          MixedStyledText('1, 1')
            Reference('1')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
            SingleStyledText(', ')
            Reference('1')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
      IndexLabel('C')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('C')
      IndexEntry('companyAPI.database (module), 9')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('companyAPI.database (module), 9')
          SingleStyledText('companyAPI.database (module), ')
          MixedStyledText('9')
            Reference('9')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('9')
      IndexEntry('companyAPI.models (module), 7')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('companyAPI.models (module), 7')
          SingleStyledText('companyAPI.models (module), ')
          MixedStyledText('7')
            Reference('7')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('7')
      IndexEntry('CompanyAppTest (class in unittes...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('CompanyAppTest (class in unittes...')
          SingleStyledText('CompanyAppTest (class in unittes...')
          MixedStyledText('11')
            Reference('11')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('11')
      IndexEntry('create_company() (in module app)...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('create_company() (in module app)...')
          SingleStyledText('create_company() (in module app)...')
          MixedStyledText('1')
            Reference('1')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
      IndexLabel('D')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('D')
      IndexEntry('delete_company() (in module app)...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('delete_company() (in module app)...')
          SingleStyledText('delete_company() (in module app)...')
          MixedStyledText('1')
            Reference('1')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
      IndexLabel('G')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('G')
      IndexEntry('get_company() (in module app), 2')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('get_company() (in module app), 2')
          SingleStyledText('get_company() (in module app), ')
          MixedStyledText('2')
            Reference('2')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('2')
      IndexLabel('I')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('I')
      IndexEntry('index() (in module app), 2')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('index() (in module app), 2')
          SingleStyledText('index() (in module app), ')
          MixedStyledText('2')
            Reference('2')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('2')
      IndexLabel('N')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('N')
      IndexEntry('not_found() (in module app), 3')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('not_found() (in module app), 3')
          SingleStyledText('not_found() (in module app), ')
          MixedStyledText('3')
            Reference('3')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3')
      IndexLabel('S')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('S')
      IndexEntry('search() (in module app), 3')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('search() (in module app), 3')
          SingleStyledText('search() (in module app), ')
          MixedStyledText('3')
            Reference('3')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3')
      IndexEntry('setUp() (unittest_companyAPI.Com...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('setUp() (unittest_companyAPI.Com...')
          SingleStyledText('setUp() (unittest_companyAPI.Com...')
          MixedStyledText('11')
            Reference('11')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('11')
      IndexLabel('T')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('T')
      IndexEntry('test_delete_company() (unittest_...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_delete_company() (unittest_...')
          SingleStyledText('test_delete_company() (unittest_...')
          MixedStyledText('11')
            Reference('11')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('11')
      IndexEntry('test_delete_nonexisting_company(...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_delete_nonexisting_company(...')
          SingleStyledText('test_delete_nonexisting_company(...')
          MixedStyledText('11')
            Reference('11')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('11')
      IndexEntry('test_get_company() (unittest_com...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_get_company() (unittest_com...')
          SingleStyledText('test_get_company() (unittest_com...')
          MixedStyledText('12')
            Reference('12')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('12')
#### ChainedContainer('column2')
  (continued) IndexSection()
       > (0,0,0,1,1) chapter
    (continued) Index()   index
         > (0,0,0,0,2) index
      IndexEntry('test_get_empty_company() (unitte...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
      IndexEntry('test_post_company() (unittest_co...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_post_company() (unittest_co...')
          SingleStyledText('test_post_company() (unittest_co...')
          MixedStyledText('12')
            Reference('12')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('12')
      IndexEntry('test_post_duplicate_company_name...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_post_duplicate_company_name...')
          SingleStyledText('test_post_duplicate_company_name...')
          MixedStyledText('13')
            Reference('13')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('13')
      IndexEntry('test_put_company() (unittest_com...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_put_company() (unittest_com...')
          SingleStyledText('test_put_company() (unittest_com...')
          MixedStyledText('13')
            Reference('13')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('13')
      IndexEntry('test_put_duplicate_company_name(...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_put_duplicate_company_name(...')
          SingleStyledText('test_put_duplicate_company_name(...')
          MixedStyledText('13')
            Reference('13')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('13')
      IndexEntry('test_put_non_existing_company() ...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_put_non_existing_company() ...')
          SingleStyledText('test_put_non_existing_company() ...')
          MixedStyledText('14')
            Reference('14')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('14')
      IndexEntry('test_put_null_company_name() (un...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('test_put_null_company_name() (un...')
          SingleStyledText('test_put_null_company_name() (un...')
          MixedStyledText('14')
            Reference('14')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('14')
      IndexLabel('U')
           > (0,0,0,0,2) index section label
             (0,0,0,0,1) body
        SingleStyledText('U')
      IndexEntry('unittest_companyAPI (module), 11')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('unittest_companyAPI (module), 11')
          SingleStyledText('unittest_companyAPI (module), ')
          MixedStyledText('11')
            Reference('11')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('11')
      IndexEntry('update_company() (in module app)...')
           > (0,0,0,1,2) level 1 index entry
             (0,0,0,0,1) body
        MixedStyledText('update_company() (in module app)...')
          SingleStyledText('update_company() (in module app)...')
          MixedStyledText('4')
            Reference('4')
                 > (0,0,0,1,1) linked reference
              SingleStyledText('4')
#### DownExpandingContainer('footer')
  Footer('		19')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		19')
      Tab('	')
      Tab('	')
      Field('19')
        SingleStyledText('19')
